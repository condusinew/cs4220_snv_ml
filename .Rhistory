df3_left <- df3[, 1:3]
df3 <- df3[, 10:19]
#splitting
split_vals <- sample.split(df3$TRUTH, SplitRatio = 0.80)
train_set <- subset(df3, split_vals = TRUE)
test_set <- subset(df3, split_vals = FALSE)
#model
rpart(as.factor(TRUTH)~., data = train_set) -> mod_class
predict(mod_class, test_set, type = 'class') -> result_class
table(test_set$TRUTH, result_class)
#refitting predictions to be bed file
predictions <- data.frame(Chr = df3_left$Chr,
START_POS_REF = df3_left$START_POS_REF,
END_POS_REF = df3_left$START_POS_REF,
TRUTH=result_class)
real1_predictions <- predictions[1:49320, ] |>
filter(TRUTH == TRUE)
real1_predictions <- predictions[, -4]
write.table(real1_predictions, "my-real1-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
#change columsn to remove chromo number
#treat diff samples differently
# load ground truth and predictions
truth = read.table('/Users/cindyyu/Desktop/CS4220/Data/real1_truth.bed', header = F)
mypred = read.table('my-real1-predictions.bed', header = FALSE) #changed to header = false
head(truth); head(mypred)
f1stats = calc.F1(mypred,truth)
print(f1stats)
#thought: should we weight the real information more?
#GET RID OF CORREXT X AND Y
#MAKE COLUMN ALL TRUE IN ALL TRUTH
alltruth_df <- alltruth_df %>% mutate(TRUTH = TRUE)
df3 <- all_df %>%
left_join(alltruth_df, by=c('Chr','START_POS_REF', 'END_POS_REF'))
df3$TRUTH <- replace_na(df3$TRUTH, FALSE)
consensus_df <- all_df %>%
mutate(two_plus = rowSums(select(., FILTER_Mutect2, FILTER_Freebayes, FILTER_Varscan, FILTER_Vardict)) >= 2)
#remove chr and genomic start/stop
df3_left <- df3[, 1:3]
df3_right <- df3[, 9:19]
#splitting
split_vals <- sample.split(df3_right$TRUTH, SplitRatio = 0.80)
train_set <- subset(df3_right, split_vals = TRUE)
test_set <- subset(df3_right, split_vals = FALSE)
#model
rpart(as.factor(TRUTH)~., data = train_set) -> mod_class
predict(mod_class, test_set, type = 'class') -> result_class
table(test_set$TRUTH, result_class)
#refitting predictions to be bed file
predictions <- data.frame(Chr = df3_left$Chr,
START_POS_REF = df3_left$START_POS_REF,
END_POS_REF = df3_left$START_POS_REF,
TRUTH=result_class)
real1_predictions <- predictions[1:49320, ] |>
filter(TRUTH == TRUE)
real1_predictions <- predictions[, -4]
write.table(real1_predictions, "my-real1-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
#change columsn to remove chromo number
#treat diff samples differently
# load ground truth and predictions
truth = read.table('/Users/cindyyu/Desktop/CS4220/Data/real1_truth.bed', header = F)
mypred = read.table('my-real1-predictions.bed', header = FALSE) #changed to header = false
head(truth); head(mypred)
f1stats = calc.F1(mypred,truth)
print(f1stats)
View(df3_left)
View(df3_right)
library(randomForest)
#random forest
install.packages("randomForest")
#random forest
install.packages("randomForest")
library(randomForest)
View(df3)
test_set <- df3(id==2)
test_set <- df3[id==2]
id <- sample(2, nrow(df3), prob = c(0.7, 0.3), replace = TRUE)
train_set <- df3[id==1]
test_set <- df3[id==2, ]
train_set <- df3[id==1, ]
View(df3)
bestmtry <- tuneRF(train_set, train_set$TRUTH,
stepFactor = 1.2, improve = 0.01, trace = T, plot = T)
split_vals <- sample.split(df3_right$TRUTH, SplitRatio = 0.80)
train_set <- subset(df3_right, split_vals = TRUE)
test_set <- subset(df3_right, split_vals = FALSE)
#splitting
split_vals <- sample.split(df3_right$TRUTH, SplitRatio = 0.80)
train_set <- subset(df3_right, split_vals == TRUE)
test_set <- subset(df3_right, split_vals == FALSE)
rpart(as.factor(TRUTH)~., data = train_set) -> mod_class
predict(mod_class, test_set, type = 'class') -> result_class
table(test_set$TRUTH, result_class)
#refitting predictions to be bed file
predictions <- data.frame(Chr = df3_left$Chr,
START_POS_REF = df3_left$START_POS_REF,
END_POS_REF = df3_left$START_POS_REF,
TRUTH=result_class)
#refitting predictions to be bed file
predictions <- data.frame(Chr = df3_left$Chr,
START_POS_REF = df3_left$START_POS_REF,
END_POS_REF = df3_left$END_POS_REF,
TRUTH=result_class)
#refitting predictions to be bed file
predictions <- data.frame(Chr = df3_left$Chr[1:nrow(result_class), ],
START_POS_REF = df3_left$START_POS_REF[1:nrow(result_class), ],
END_POS_REF = df3_left$END_POS_REF[1:nrow(result_class), ],
TRUTH=result_class)
#remove chr and genomic start/stop
df3_left <- df3[, 1:3]
df3_right <- df3[, 9:19]
#splitting
split_vals <- sample.split(df3_right$TRUTH, SplitRatio = 0.80)
train_set <- subset(df3_right, split_vals == TRUE)
test_set <- subset(df3_right, split_vals == FALSE)
rpart(as.factor(TRUTH)~., data = train_set) -> mod_class
predict(mod_class, test_set, type = 'class') -> result_class
table(test_set$TRUTH, result_class)
#refitting predictions to be bed file
predictions <- data.frame(Chr = df3_left$Chr,
START_POS_REF = df3_left$START_POS_REF,
END_POS_REF = df3_left$END_POS_REF,
TRUTH=result_class)
#refitting predictions to be bed file
predictions <- data.frame(Chr = df3_left[1:nrow(result_class), ]$Chr,
START_POS_REF = df3_left$START_POS_REF,
END_POS_REF = df3_left$END_POS_REF,
TRUTH=result_class)
nrow(result_class)
length(result_class)
#refitting predictions to be bed file
predictions <- data.frame(Chr = df3_left[1:length(result_class), ]$Chr,
START_POS_REF = df3_left[length(result_class)]$START_POS_REF,
END_POS_REF = df3_left[length(result_class)]$END_POS_REF,
TRUTH=result_class)
#refitting predictions to be bed file
predictions <- data.frame(Chr = df3_left[1:length(result_class), ]$Chr,
START_POS_REF = df3_left[length(result_class), ]$START_POS_REF,
END_POS_REF = df3_left[length(result_class), ]$END_POS_REF,
TRUTH=result_class)
real1_predictions <- predictions[1:49320, ] |>
filter(TRUTH == TRUE)
real1_predictions <- predictions[, -4]
write.table(real1_predictions, "my-real1-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
calc.F1 = function(pred,truth) {
# append 'Chr' and 'StartPos'
predv = paste(pred[,1],pred[,2])
truthv = paste(truth[,1],truth[,2])
res = data.frame(matrix(nrow = 1,ncol = 6))
colnames(res) = c('TP','FP','FN','Precision','Recall','F1')
res$TP = sum(predv %in% truthv)
res$FP = sum(!(predv %in% truthv))
res$FN = sum(!(truthv %in% predv))
res$Precision = res$TP/(res$TP + res$FP)
res$Recall = res$TP/(res$TP + res$FN)
res$F1 = (2*res$Precision*res$Recall)/(res$Precision + res$Recall)
return(res)
}
# load ground truth and predictions
truth = read.table('/Users/cindyyu/Desktop/CS4220/Data/real1_truth.bed', header = F)
mypred = read.table('my-real1-predictions.bed', header = FALSE) #changed to header = false
head(truth); head(mypred)
f1stats = calc.F1(mypred,truth)
print(f1stats)
mypred = read.table('my-real1-predictions.bed', header = FALSE) #changed to header = false
# load ground truth and predictions
truth = read.table('/Users/cindyyu/Desktop/CS4220/Data/real1_truth.bed', header = F)
head(truth); head(mypred)
f1stats = calc.F1(mypred,truth)
print(f1stats)
real1_predictions <- predictions |>
filter(TRUTH == TRUE)
real1_predictions <- predictions[, -4]
write.table(real1_predictions, "my-real1-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
# load ground truth and predictions
truth = read.table('/Users/cindyyu/Desktop/CS4220/Data/real1_truth.bed', header = F)
mypred = read.table('my-real1-predictions.bed', header = FALSE) #changed to header = false
head(truth); head(mypred)
f1stats = calc.F1(mypred,truth)
print(f1stats)
View(train_set)
View(test_set)
View(real1_predictions)
result_class
View(test_set)
View(train_set)
View(test_set)
train_set <- subset(df3, split_vals == TRUE)
#splitting
#SOMEHOW REMOVE COLUMNS OF GENOME NUMBER AND CHR
split_vals <- sample.split(df3$TRUTH, SplitRatio = 0.80)
train_set <- subset(df3, split_vals == TRUE)
test_set <- subset(df3, split_vals == FALSE)
#model
rpart(as.factor(TRUTH)~., data = train_set) -> mod_class
#model
rpart(as.factor(TRUTH)~., data = train_set) -> mod_class
predict(mod_class, test_set, type = 'class') -> result_class
df3 <- all_df %>%
left_join(alltruth_df, by=c('Chr','START_POS_REF', 'END_POS_REF'))
df3 <- all_df %>%
left_join(alltruth_df, by=c('Chr','START_POS_REF', 'END_POS_REF'))
df3$TRUTH <- replace_na(df3$TRUTH, FALSE)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/cindyyu/Desktop/CS4220")
library(readxl)
library(tidyverse)
library(caTools)
#prob dont need this later
library(rpart)
#random forest
install.packages("randomForest")
library(randomForest)
real1_df <- read.table("snv-parse-real1.txt", header = T)
real2.1_df <- read.table("snv-parse-real2_part1.txt", header = T)
syn1_df <- read.table("snv-parse-syn1.txt", header = T)
syn2_df <- read.table("snv-parse-syn2.txt", header = T)
syn3_df <- read.table("snv-parse-syn3.txt", header = T)
syn4_df <- read.table("snv-parse-syn4.txt", header = T)
syn5_df <- read.table("snv-parse-syn5.txt", header = T)
all_df <- rbind(real1_df, real2.1_df, syn1_df, syn2_df, syn3_df, syn4_df, syn5_df)
#add headers: chromosome #, genomic start, genomic stop
real1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/real1/real1_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
real2.1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/real2_part1/real2_truth_chr1to5.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn1/syn1_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn2_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn2/syn2_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn3_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn3/syn3_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn4_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn4/syn4_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn5_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn5/syn5_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
alltruth_df <- rbind(real1_truth, real2.1_truth, syn1_truth, syn2_truth, syn3_truth, syn4_truth, syn5_truth)
names(alltruth_df) <- c("Chr", "START_POS_REF", "END_POS_REF")
#thought: should we weight the real information more?
#GET RID OF CORREXT X AND Y
#MAKE COLUMN ALL TRUE IN ALL TRUTH
alltruth_df <- alltruth_df %>% mutate(TRUTH = TRUE)
df3 <- all_df %>%
left_join(alltruth_df, by=c('Chr','START_POS_REF', 'END_POS_REF'))
df3$TRUTH <- replace_na(df3$TRUTH, FALSE)
consensus_df <- all_df %>%
mutate(two_plus = rowSums(select(., FILTER_Mutect2, FILTER_Freebayes, FILTER_Varscan, FILTER_Vardict)) >= 2)
#remove chr and genomic start/stop
#splitting
#SOMEHOW REMOVE COLUMNS OF GENOME NUMBER AND CHR
split_vals <- sample.split(df3$TRUTH, SplitRatio = 0.80)
train_set <- subset(df3, split_vals == TRUE)
test_set <- subset(df3, split_vals == FALSE)
#model
rpart(as.factor(TRUTH)~., data = train_set) -> mod_class
predict(mod_class, test_set, type = 'class') -> result_class
for(i in 1:ncol(df3)){
data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
}
#replace NAs
df3 %>% mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x))
split_vals <- sample.split(df3$TRUTH, SplitRatio = 0.80)
train_set <- subset(df3, split_vals == TRUE)
test_set <- subset(df3, split_vals == FALSE)
#model
rpart(as.factor(TRUTH)~., data = train_set) -> mod_class
predict(mod_class, test_set, type = 'class') -> result_class
train_set_split <- train_set[-(1:8), ]
View(train_set_split)
split_vals <- sample.split(df3$TRUTH, SplitRatio = 0.80)
train_set <- subset(df3, split_vals == TRUE)
test_set <- subset(df3, split_vals == FALSE)
train_set_split <- train_set[,-(1:8)]
#model
rpart(as.factor(TRUTH)~ FILTER_Mutect, data = train_set_split) -> mod_class
#model
rpart(as.factor(TRUTH)~ ., data = train_set_split) -> mod_class
#model
rpart(as.factor(TRUTH)~ ., data = train_set_split) -> mod_class
predict(mod_class, test_set, type = 'class') -> result_class
table(test_set$TRUTH, result_class)
#refitting predictions to be bed file
#REALIZED I SHOULDNT HAVE UPENDED TO DF3, BUT RATHER TEST SET!
predictions <- data.frame(Chr = test_set$Chr,
START_POS_REF = test_set$START_POS_REF,
END_POS_REF = test_set$END_POS_REF,
TRUTH=result_class)
real1_predictions <- predictions |>
filter(TRUTH == TRUE)
real1_predictions <- predictions[, -4]
write.table(real1_predictions, "my-real1-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
# load ground truth and predictions
truth = read.table('/Users/cindyyu/Desktop/CS4220/Data/real1_truth.bed', header = F)
mypred = read.table('my-real1-predictions.bed', header = FALSE) #changed to header = false
head(truth); head(mypred)
f1stats = calc.F1(mypred,truth)
---
title: "Variant Calling model evaluation demo"
# load ground truth and predictions
truth = read.table('/Users/cindyyu/Desktop/CS4220/Data/real1_truth.bed', header = F)
mypred = read.table('my-real1-predictions.bed', header = FALSE) #changed to header = false
head(truth); head(mypred)
f1stats = calc.F1(mypred,truth)
# clean current envrionement variables
rm(list = ls())
# set your current working directory
setwd("/Users/cindyyu/Desktop/EEB313/cs4220_snv_ml"); print(getwd())
calc.F1 = function(pred,truth) {
# append 'Chr' and 'StartPos'
predv = paste(pred[,1],pred[,2])
truthv = paste(truth[,1],truth[,2])
res = data.frame(matrix(nrow = 1,ncol = 6))
colnames(res) = c('TP','FP','FN','Precision','Recall','F1')
res$TP = sum(predv %in% truthv)
res$FP = sum(!(predv %in% truthv))
res$FN = sum(!(truthv %in% predv))
res$Precision = res$TP/(res$TP + res$FP)
res$Recall = res$TP/(res$TP + res$FN)
res$F1 = (2*res$Precision*res$Recall)/(res$Precision + res$Recall)
return(res)
}
# load ground truth and predictions
truth = read.table('/Users/cindyyu/Desktop/CS4220/Data/real1_truth.bed', header = F)
mypred = read.table('my-real1-predictions.bed', header = FALSE) #changed to header = false
head(truth); head(mypred)
f1stats = calc.F1(mypred,truth)
print(f1stats)
set.seed(3)
id <- sample(2, nrow(df3), prob = c(0.7, 0.3), replace = TRUE)
#need some way to get NAs out > research what to do w NA
bestmtry <- tuneRF(train_set, train_set$TRUTH,
stepFactor = 1.2, improve = 0.01, trace = T, plot = T)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/cindyyu/Desktop/CS4220")
library(readxl)
library(tidyverse)
library(caTools)
#prob dont need this later
library(rpart)
#random forest
install.packages("randomForest")
library(randomForest)
real1_df <- read.table("snv-parse-real1.txt", header = T)
real2.1_df <- read.table("snv-parse-real2_part1.txt", header = T)
syn1_df <- read.table("snv-parse-syn1.txt", header = T)
syn2_df <- read.table("snv-parse-syn2.txt", header = T)
syn3_df <- read.table("snv-parse-syn3.txt", header = T)
syn4_df <- read.table("snv-parse-syn4.txt", header = T)
syn5_df <- read.table("snv-parse-syn5.txt", header = T)
all_df <- rbind(real1_df, real2.1_df, syn1_df, syn2_df, syn3_df, syn4_df, syn5_df)
#add headers: chromosome #, genomic start, genomic stop
real1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/real1/real1_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
real2.1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/real2_part1/real2_truth_chr1to5.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn1/syn1_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn2_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn2/syn2_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn3_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn3/syn3_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn4_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn4/syn4_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn5_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn5/syn5_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/cindyyu/Desktop/CS4220")
library(readxl)
library(tidyverse)
library(caTools)
#prob dont need this later
library(rpart)
#random forest
install.packages("randomForest")
library(randomForest)
real1_df <- read.table("snv-parse-real1.txt", header = T)
real2.1_df <- read.table("snv-parse-real2_part1.txt", header = T)
syn1_df <- read.table("snv-parse-syn1.txt", header = T)
syn2_df <- read.table("snv-parse-syn2.txt", header = T)
syn3_df <- read.table("snv-parse-syn3.txt", header = T)
syn4_df <- read.table("snv-parse-syn4.txt", header = T)
syn5_df <- read.table("snv-parse-syn5.txt", header = T)
all_df <- rbind(real1_df, real2.1_df, syn1_df, syn2_df, syn3_df, syn4_df, syn5_df)
#thought: should we weight the real information more?
#GET RID OF CORREXT X AND Y
#MAKE COLUMN ALL TRUE IN ALL TRUTH
alltruth_df <- alltruth_df %>% mutate(TRUTH = TRUE)
View(real1_truth)
View(real1_df)
View(all_df)
all_df |>
group_by(m2_MQ)
all_df |>
filter(m2_MQ!= is.na())
all_df |>
filter(!is.na(m2_MQ))
all_df |>
filter(!is.na(f_MQMR))
all_df |>
filter(!is.na(vs_SSC))
all_df |>
filter(!is.na(vs_SPV))
View(syn1_df)
knitr::opts_chunk$set(echo = TRUE)
real1_df <- read.table("snv-parse-real1.txt", header = T)
real2.1_df <- read.table("snv-parse-real2_part1.txt", header = T)
syn1_df <- read.table("snv-parse-syn1.txt", header = T)
syn2_df <- read.table("snv-parse-syn2.txt", header = T)
syn3_df <- read.table("snv-parse-syn3.txt", header = T)
syn4_df <- read.table("snv-parse-syn4.txt", header = T)
syn5_df <- read.table("snv-parse-syn5.txt", header = T)
all_df <- rbind(real1_df, real2.1_df, syn1_df, syn2_df, syn3_df, syn4_df, syn5_df)
#add headers: chromosome #, genomic start, genomic stop
real1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/real1/real1_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
real2.1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/real2_part1/real2_truth_chr1to5.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn1/syn1_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn2_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn2/syn2_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn3_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn3/syn3_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn4_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn4/syn4_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn5_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn5/syn5_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
alltruth_df <- rbind(real1_truth, real2.1_truth, syn1_truth, syn2_truth, syn3_truth, syn4_truth, syn5_truth)
names(alltruth_df) <- c("Chr", "START_POS_REF", "END_POS_REF")
write.table(alltruth_df, "all_truths.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
alltruth_df <- alltruth_df %>% mutate(TRUTH = TRUE)
library(dplyr)
#F1 = 0.02754307
consensus_df <- all_df %>%
mutate(two_plus = rowSums(select(., FILTER_Mutect2, FILTER_Freebayes, FILTER_Varscan, FILTER_Vardict)) >= 2) |>
filter(two_plus == TRUE)
consensus_predictions <- consensus_df[, -4]
write.table(consensus_predictions, "my-consensus-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
## find best languages
```{r}
## find best languages
```{r}
write.table(consensus_predictions, "my-consensus-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
#MUTECT2 F1 = 0.79
m2_predictions <- all_df |>
filter(FILTER_Mutect2)
write.table(m2_predictions, "my-m2-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
#FREEBAYES F1 = 0.75
f_predictions <- all_df |>
filter(FILTER_Freebayes)
write.table(f_predictions, "my-f-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
#VARDICT F1 = 0.767
vd_predictions <- all_df |>
filter(FILTER_Vardict)
write.table(vd_predictions, "my-vd-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
#VARSCAN = 0.337
vs_predictions <- all_df |>
filter(FILTER_Varscan)
write.table(vs_predictions, "my-vs-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
#F1 = 0.927
best_two_df <- all_df %>%
filter(FILTER_Mutect2 == TRUE & FILTER_Vardict == TRUE)
best_two_predictions <- best_two_df[, -4]
write.table(best_two_predictions, "best-two-predictions.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
knitr::opts_chunk$set(echo = TRUE)
real1_df <- read.table("snv-parse-real1.txt", header = T)
real2.1_df <- read.table("snv-parse-real2_part1.txt", header = T)
syn1_df <- read.table("snv-parse-syn1.txt", header = T)
syn2_df <- read.table("snv-parse-syn2.txt", header = T)
syn3_df <- read.table("snv-parse-syn3.txt", header = T)
syn4_df <- read.table("snv-parse-syn4.txt", header = T)
syn5_df <- read.table("snv-parse-syn5.txt", header = T)
all_df <- rbind(real1_df, real2.1_df, syn1_df, syn2_df, syn3_df, syn4_df, syn5_df)
rm(real1_df, real2.1_df, syn1_df, syn2_df, syn3_df, syn4_df, syn5_df)
#add headers: chromosome #, genomic start, genomic stop
real1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/real1/real1_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
real2.1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/real2_part1/real2_truth_chr1to5.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn1_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn1/syn1_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn2_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn2/syn2_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn3_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn3/syn3_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn4_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn4/syn4_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
syn5_truth <- as.data.frame(read.table("/Users/cindyyu/Desktop/CS4220/Data/syn5/syn5_truth.bed",
header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
alltruth_df <- rbind(real1_truth, real2.1_truth, syn1_truth, syn2_truth, syn3_truth, syn4_truth, syn5_truth)
names(alltruth_df) <- c("Chr", "START_POS_REF", "END_POS_REF")
write.table(alltruth_df, "all_truths.bed",row.names = F,col.names = F, sep="\t", quote=FALSE)
rm(real1_truth, real2.1_truth, syn1_truth, syn2_truth, syn3_truth, syn4_truth, syn5_truth)
alltruth_df <- alltruth_df %>% mutate(TRUTH = TRUE)
setwd("/Users/cindyyu/Desktop/CS4220")
library(readxl)
library(tidyverse)
library(caTools)
#random forest
library(randomForest)
library(caret)
library(VIM)
alltruth_df <- alltruth_df %>% mutate(TRUTH = TRUE)
df3 <- all_df %>%
left_join(alltruth_df, by=c('Chr','START_POS_REF', 'END_POS_REF'))
df3$TRUTH <- replace_na(df3$TRUTH, FALSE)
#replace NAs
df3_narm <- df3 %>% mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x))
df3 <- df3 %>% mutate_at(c('FILTER_Mutect2', 'FILTER_Freebayes', 'FILTER_Vardict', 'FILTER_Varscan'), as.numeric)
df3[, 13:18] <- scale(df3[, 13:18])
rm(all_df, alltruth_df, real1_df, real2.1_df, syn1_df,syn2_df, syn3_df, syn4_df, syn5_df )
kNN(df3, k=3)
kNN(df3, k=3)
